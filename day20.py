map = """                                 T     P           U       U       Z   O                                     
                                 H     Z           A       U       W   K                                     
  ###############################.#####.###########.#######.#######.###.###################################  
  #.#.#.#.#.............#.#...#.#.....#...#.....#.....#.....#...#.....#...#...#...#.#.......#.....#.......#  
  #.#.#.#.#####.#.#####.#.###.#.#.###.###.#.#.#.#.#.#.#.###.###.#.###.#.###.###.###.#####.#####.###.#.#####  
  #...#.........#.#...........#...#...#.#...#.#.#.#.#.#.#.#.....#...#.#.#...........#.#.#.#.#.......#...#.#  
  ###.###.###.#########.###.###.#####.#.#.###.#####.#.#.#.#####.#.#.#.#.#.#######.###.#.#.#.###.#########.#  
  #...#.#.#.......#.#.....#.....#.......#.#.#.#.#...#.#.#.#.#...#.#.#.#.......#.....#...#.#.#.#.....#.....#  
  ###.#.#####.###.#.#########.#.#.###.###.#.#.#.#####.#.#.#.#######.#.#.#.#############.#.#.#.#.###.#####.#  
  #.....#.....#.#.#...........#.#.#...#.#.#.......#...#.......#...#.#.#.#.#...#.#.#.#.#.........#.#...#...#  
  #.###.#####.#.#######.#####.#######.#.#####.#####.###.#.#.#####.###.#.###.###.#.#.#.#.#########.#####.###  
  #.#.#.#...#.#.....#.#.#.#...#...#.......#.#...#.....#.#.#.....#.....#.............................#.....#  
  ###.#.#.#####.#####.###.###.#.###.#.#.###.#.#####.#.###.#.#.#.#####.###.#######.###.###.#.###.#.###.#####  
  #.........#.#...#.#.......#.#...#.#.#.#.....#.....#.#...#.#.#.#...#.#...#.#...#.#.#.#...#...#.#.#.....#.#  
  #####.#####.#.###.#####.#.###.#.###.###.###.#.###.###.#####.#####.#.#.#.#.#.#####.#####.###########.###.#  
  #.#.#...#.#.....#...#...#.....#.#.....#.#...#...#...#.#.#.#.#...#.#.#.#...#.#.......#...........#.#.#.#.#  
  #.#.#.###.#.#####.###.#########.#.#.#######.###.#.#####.#.#.#.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#.#  
  #.....#.....#.#.#...#.#...#.....#.#...#.....#...#...#...#.#.#.#.#...#.#.......#.#.#...#.#.#.#.#...#.....#  
  ###.###.#.#.#.#.#.#######.#####.###.#####.###.#.#######.#.#.#.#.#.#.#.#.###.#######.#########.#.#####.###  
  #...#.#.#.#.#.#...#...#.....#...#.....#.#...#.#.#.#.......#.#.#.#.#.#...#.#...#...#.#.....#...#.....#.#.#  
  ###.#.#####.#.###.#.#######.###.###.###.###.#.###.###.#.###.#.#.#.###.###.#.###.#.#.#.#########.#.###.#.#  
  #.....#.#.......#.#...#.....#.#.......#...#.#.....#.#.#.....#.#.#...#.#.........#.....#.#...#.#.#.....#.#  
  ###.#.#.###.#####.#.#####.#.#.#.#.#.###.#.#.#.#####.#.#.###.#.#.###.#.###.#############.#.###.###.#.#.#.#  
  #.#.#.#.#.......#.#.#...#.#...#.#.#.#.#.#.#.#.......#.#.#...#.#...#.#.#...#...#.....#.....#.#...#.#.#.#.#  
  #.#.###.#####.###.#.###.#####.#.#####.#.###.#####.#.#.#######.###.#.###.###.###.#########.#.#.#.#####.#.#  
  #.......#...#...#...#.#.........#...........#.....#.#.......#...#.....#.........#...#.....#.#.#...#.#...#  
  ###.#.###.###.#.###.#.#######.#######.#######.#############.###.###########.#######.###.#.#.###.###.#.###  
  #.#.#...#...#.#.....#...#    Y       R       R             U   X           L    #.....#.#.#.#...#.#...#.#  
  #.#####.#.#######.#####.#    O       F       U             A   Z           Q    #.#.#####.#.###.#.###.#.#  
  #.#.#.#...#...#.....#.#.#                                                       #.#.#.........#...#.....#  
  #.#.#.###.#.#####.#.#.#.#                                                       ###.#.#.#.#.###.#####.###  
RF........#...#.#.#.#......TH                                                     #.#.#.#.#.#.....#.......#  
  #.#######.###.#.#####.###                                                       #.#.#######.###.###.#.###  
BN......#...#.#.#.#.#......ER                                                   BH........#.#.#...#...#.#.#  
  #.#.#####.#.#.#.#.#.###.#                                                       #####.###.#.#######.###.#  
  #.#.#.#...........#.#...#                                                       #.....#.#.#.#.#...#.....#  
  #.###.#.#####.###.###.###                                                       ###.###.#.#.#.###.#.#####  
  #.......#.#.#.#.......#.#                                                       #...#.#.#.#...#.......#..LP
  #######.#.#.#######.###.#                                                       ###.###.#.#.#####.#.###.#  
ON..#.#.#.#.......#.#.#...#                                                       #.#...............#.....#  
  #.#.#.#.###.###.#.#####.#                                                       #.#######################  
  #.#...#.#.....#.........#                                                       #.......................#  
  #.#.#.#####.###.###.###.#                                                       #.#####.#.#.#.#.#####.###  
  #.#.#.....#...#...#.#....CU                                                     #...#...#.#.#.#.#.#...#..CU
  #.#.#.###.#.###.#######.#                                                       #.#####.#.#######.#.###.#  
  #...#.#.....#.#.#...#...#                                                       #.#...#.#.....#.#...#...#  
  ###.#########.#####.#.#.#                                                       #.#.#######.#.#.###.###.#  
YO..#.#.#.#...#.....#.#.#.#                                                     BT..#.....#.#.#.#...#.....#  
  #.###.#.#.#.#.#.###.#####                                                       #.###.###.#######.#######  
  #.........#...#..........UK                                                     #.#.....#.............#..GR
  #.#.###.#.###.###########                                                       ###.#.#####.#########.#.#  
  #.#.#...#...#.#.....#...#                                                       #...#.......#.#...#.....#  
  ###.#########.#.#####.#.#                                                       #.###.#.#.#.#.#.#####.###  
ZH..#...#.#...#.#.#...#.#..GR                                                   OK....#.#.#.#.#.#.#.#...#.#  
  #.#####.###.###.#.#.#.###                                                       #############.#.#.#####.#  
  #.................#...#.#                                                       #.#...#...#.#............KP
  #######################.#                                                       #.#.###.#.#.#.#######.###  
  #.......................#                                                     RK..#.....#.........#.....#  
  ###.#####.#.#.#######.###                                                       #.#.#######.#######.#.###  
BT..#.#...#.#.#.#.....#.#..BN                                                     #.....#...#.#.#...#.#...#  
  #.#.#.#.#####.#.#.###.#.#                                                       #####.###.###.###.#######  
  #.#...#.#...#.#.#.....#.#                                                       #.#.#.#.............#...#  
  #.#####.#.#####.#######.#                                                       #.#.#.#.#.###.#.#######.#  
  #.......#.#.#.#.........#                                                     ON....#.#.#.#...#.#...#....LW
  #########.#.#.###########                                                       #.#####.#######.###.###.#  
  #...............#........ZW                                                     #.#.........#.........#.#  
  #.#.#.###.###.#.###.#####                                                       #.#####.#############.#.#  
UK..#.#.#.#.#...#.#...#...#                                                       #.........#...#.#.#.....#  
  #.#.###.#####.#.###.#.###                                                       #############.#.#.###.###  
  #.#.#.....#.#.#.#.......#                                                       #.............#...#...#.#  
  ###.#.###.#.###.#.#######                                                       #.###.#.#.###.#.#.#####.#  
  #.#.#.#.#...#.#.....#...#                                                       #...#.#.#...#...#.....#..IG
  #.#####.###.#.#######.###                                                       #.#.###.#####.#.#.###.#.#  
  #.......#.............#.#                                                       #.#.#.#.#.....#.#...#...#  
  ###.#.###.#.#.###.###.#.#                                                       #.###.#.#.#.#########.#.#  
LQ....#...#.#.#...#.#...#..UU                                                   PZ......#.#.#...#.......#.#  
  #.#######.###.#.#####.#.#                                                       #.###.#########.###.#####  
ZZ............#.#.#.#...#.#                                                       #.#.#.......#...#.....#.#  
  #.#.#.#.#.#######.###.#.#                                                       #.#.#.#####.#.#####.###.#  
  #.#.#.#.#.........#.....#                                                       #.#.....#...#.#.........#  
  #.#.###.#.#.###.#.#.#.#.#    L     K           Z     L     E       A       I    #.###.#####.#####.#.#.#.#  
  #.#...#.#.#.#...#.#.#.#.#    W     P           H     P     G       U       G    #.#.....#.#...#...#.#.#.#  
  #.#######.#####.#.#####.#####.#####.###########.#####.#####.#######.#######.###########.#.###.#.###.#.###  
  #.#.........#...#.#.......#.....#.#.....#.......#.......#...#.#...#.#.#.#...#.......#.#.#.#...#...#.#...#  
  #.###.###.###.#####.#######.###.#.#.###.#.###.###.###.###.###.#.#.#.#.#.###.#.###.###.#.#.###.###.###.###  
  #.#...#.....#.#.#.#.#.........#...#.#.#.#.#.#...#...#.#...#.....#.#...#.#.......#.#.........#.#...#.#...#  
  #.###.###.#####.#.###.#.#.#.#########.#.#.#.#####.###.###.###.###.#.###.###.###########.#.###.#####.#.###  
  #...#.#...#.......#.#.#.#.#.#.#.....#...#.......#...#.#.....#.#.....#...#...#.#...#.#...#...#.#.......#.#  
  #####.###.#####.#.#.#.###.#.#.#####.#.#.###.#####.#########.#.###.#.#.#.#.###.#.###.###.#.#.#.###.#.#.#.#  
  #.....#...#.#...#.....#...#.......#...#.#.......#.........#.#...#.#.#.#...#...#.#.....#.#.#.#...#.#.#...#  
  #.#.#.#.#.#.#.#####.#########.###.#.###.#.#######.###.#####.#.#####.#####.###.#.###.#.#.###.#.#######.###  
  #.#.#.#.#...#.#.....#.#.#.#.....#.#...#.#.#.#.#.#...#.#.....#.....#.#...#...........#.#.#.#.#.#...#.#...#  
  #.#######.#.#########.#.#.#.#.#########.#.#.#.#.#####.###.#.#.#########.#.#.###.###.#####.###.###.#.#.###  
  #.#.#.#...#...#.............#...#.#.....#.#.#...#.....#...#.#.....#.#.....#.#.#.#...#.#.#...#.#...#.#...#  
  #.#.#.###.#.#######.#.###.#.#####.#####.#.#.#.#####.#.###.###.###.#.###.#.###.#.#####.#.###.###.###.#####  
  #.#.....#.#.#.#.....#.#...#.....#...#...#.......#.#.#...#...#...#.#.#...#.....#.#...#.#.................#  
  #####.###.###.#####.###.#.###.###.#####.#####.#.#.#####.###.###.###.#######.#######.#.#.###.#.###.###.#.#  
  #.........#.........#...#.#.#.#.#.....#.#.....#...#.#.#.#...#.....#...........#.........#.#.#...#.#...#.#  
  #.#####.#.#.#####.###.###.#.#.#.#.#.###.#.#########.#.#.#.###.###.#####.###.#.#.#####.###.#.#######.###.#  
  #.#.#...#.#.#.#...#...#...#...#...#.....#.......#.......#.#.#.#...#.#...#.#.#...#.#.#.#...........#.#...#  
  ###.#.#######.#############.#####.#####.#.#####.#######.#.#.#.#####.###.#.###.###.#.#.###########.#.#.###  
  #...#...#.#.....#.......#.......#.#...#.#.#...#.#.#...#.#.#.....#...#...#...#...#...#...#...#...#.#.#...#  
  ###.#####.#####.#.#####.#.#####.#.#.#.###.#.#.#.#.###.#.#.#.#.###.###.###.#.#####.#######.###.#.###.###.#  
  #...#.................#.....#.#.#...#.#.#.#.#.#.#.......#.#.#.#.....#.....#...................#.#...#...#  
  #.#.###.###.###.#.#.#####.###.#.#.#.#.#.###.#.#.#.#######.###.###.#.#.#####.###.#########.#.#.###.#.###.#  
  #.#.....#...#...#.#...#.....#...#.#.#...#...#...#.......#...#.....#.#.#.......#.........#.#.#...#.#.#...#  
  #############################.#########.###.#########.#####.###.#######.###.#############################  
                               B         R   A         R     E   E       A   X                               
                               H         U   U         K     R   G       A   Z                               """.splitlines()
# map = """                   A
#                    A
#   #################.#############
#   #.#...#...................#.#.#
#   #.#.#.###.###.###.#########.#.#
#   #.#.#.......#...#.....#.#.#...#
#   #.#########.###.#####.#.#.###.#
#   #.............#.#.....#.......#
#   ###.###########.###.#####.#.#.#
#   #.....#        A   C    #.#.#.#
#   #######        S   P    #####.#
#   #.#...#                 #......VT
#   #.#.#.#                 #.#####
#   #...#.#               YN....#.#
#   #.###.#                 #####.#
# DI....#.#                 #.....#
#   #####.#                 #.###.#
# ZZ......#               QG....#..AS
#   ###.###                 #######
# JO..#.#.#                 #.....#
#   #.#.#.#                 ###.#.#
#   #...#..DI             BU....#..LF
#   #####.#                 #.#####
# YN......#               VT..#....QG
#   #.###.#                 #.###.#
#   #.#...#                 #.....#
#   ###.###    J L     J    #.#.###
#   #.....#    O F     P    #.#...#
#   #.###.#####.#.#####.#####.###.#
#   #...#.#.#...#.....#.....#.#...#
#   #.#####.###.###.#.#.#########.#
#   #...#.#.....#...#.#.#.#.....#.#
#   #.###.#####.###.###.#.#.#######
#   #.#.........#...#.............#
#   #########.###.###.#############
#            B   J   C
#            U   P   P               """.splitlines()
from collections import defaultdict, deque
import heapq

header_1, header_2, *map, footer_1, footer_2 = map
header_1 = header_1[2:-2]
header_2 = header_2[2:-2]
footer_1 = footer_1[2:-2]
footer_2 = footer_2[2:-2]
coff = 25, 25
# coff = 7, 7
cwid = 55, 55
# cwid = 17, 19
left = []
right = []
for y, _row in enumerate(map):
    left_1, left_2, *row, right_1, right_2 = _row
    left.append(left_1 + left_2)
    right.append(right_1 + right_2)
    map[y] = row

header = [i + j for i, j in zip(header_1, header_2)]
footer = [i + j for i, j in zip(footer_1, footer_2)]

portals = defaultdict(set)
portals_to_name = {}
for x, entrance_name in enumerate(header):
    if entrance_name != "  ":
        portals[entrance_name].add((x, 0))
        portals_to_name[(x, 0)] = entrance_name
for x, entrance_name in enumerate(footer):
    if entrance_name != "  ":
        portals[entrance_name].add((x, len(map) - 1))
        portals_to_name[(x, len(map) - 1)] = entrance_name
for y, entrance_name in enumerate(left):
    if entrance_name != "  ":
        portals[entrance_name].add((0, y))
        portals_to_name[(0, y)] = entrance_name
for y, entrance_name in enumerate(right):
    if entrance_name != "  ":
        portals[entrance_name].add((len(map[0]) - 1, y))
        portals_to_name[(len(map[0]) - 1, y)] = entrance_name

inside_h = [
    i + j
    for i, j in zip(
        map[coff[1]][coff[0] : coff[0] + cwid[0]],
        map[coff[1] + 1][coff[0] : coff[0] + cwid[0]],
    )
]
inside_f = [
    i + j
    for i, j in zip(
        map[coff[1] + cwid[1] - 2][coff[0] : coff[0] + cwid[0]],
        map[coff[1] + cwid[1] - 1][coff[0] : coff[0] + cwid[0]],
    )
]
inside_l = [i[coff[0]] + i[coff[0] + 1] for i in map[coff[1] : coff[1] + cwid[1]]]
inside_r = [
    i[coff[0] + cwid[0] - 2] + i[coff[0] + cwid[0] - 1]
    for i in map[coff[1] : coff[1] + cwid[1]]
]

for x, entrance_name in enumerate(inside_h):
    if entrance_name != "  ":
        portals[entrance_name].add((x + coff[0], coff[1] - 1))
        portals_to_name[(x + coff[0], coff[1] - 1)] = entrance_name
for x, entrance_name in enumerate(inside_f):
    if entrance_name != "  ":
        portals[entrance_name].add((x + coff[0], coff[1] + cwid[1]))
        portals_to_name[(x + coff[0], coff[1] + cwid[1])] = entrance_name
for y, entrance_name in enumerate(inside_l):
    if entrance_name != "  ":
        portals[entrance_name].add((coff[0] - 1, y + coff[1]))
        portals_to_name[(coff[0] - 1, y + coff[1])] = entrance_name
for y, entrance_name in enumerate(inside_r):
    if entrance_name != "  ":
        portals[entrance_name].add((coff[0] + cwid[0], y + coff[1]))
        portals_to_name[(coff[0] + cwid[0], y + coff[1])] = entrance_name
# search_map = defaultdict(lambda: 9999)
print(portals)
position = list(portals["AA"])[0]
destination = list(portals["ZZ"])[0]
import colorama as colour

colour.init(autoreset=True)
empty = colour.Back.BLACK + "　"
wall = colour.Back.WHITE + "　"
unexplored = colour.Back.LIGHTBLACK_EX + "　"
cursor_pos = colour.Cursor.POS()


def search(x, y):
    queue = deque([(x, y)])
    dists = {(x, y): 0}
    while queue:
        col, row = queue.popleft()
        for (x, y) in [
            (row, col + 1),
            (row, col - 1),
            (row + 1, col),
            (row - 1, col),
        ]:
            if not (0 <= x < len(map[0]) and 0 <= y < len(map)):
                continue
            tile = map[y][x]
            if tile != "." or (x, y) in dists:
                continue
            potential_name = portals_to_name.get((x, y))
            if potential_name == "ZZ":
                print(dists[col, row] + 1)
            if len(portals.get(potential_name, "")) > 1:
                print("taking a portal:", potential_name)
                # taken_portals.add(potential_name)
                target = list(portals[potential_name] - {(x, y)})[0]
                dists[target] = dists[col, row] + 2
                queue.append(target)
            dists[x, y] = dists[col, row] + 1
            queue.append((x, y))
    return dists


def search_2(x, y):
    queue = deque([(x, y, 0)])
    dists = {(x, y, 0): 0}
    while queue:
        col, row, depth = queue.popleft()
        for (x, y) in [
            (row, col + 1),
            (row, col - 1),
            (row + 1, col),
            (row - 1, col),
        ]:
            if not (0 <= x < len(map[0]) and 0 <= y < len(map)):
                continue
            tile = map[y][x]
            if tile != "." or (x, y, depth) in dists:
                continue
            potential_name = portals_to_name.get((x, y))
            # if potential_name == "ZZ":
            #     print(dists[col, row, depth] + 1)
            if len(portals.get(potential_name, "")) > 1:
                take = False
                next_depth = depth
                if 0 in (x, y) or x == len(map[0]) - 1 or y == len(map) - 1:
                    if depth != 0:
                        take = True
                        next_depth = depth - 1
                else:
                    if depth != 99:
                        take = True
                        next_depth = depth + 1
                if take:
                    # print("taking a portal:", potential_name)
                    # taken_portals.add(potential_name)
                    target = list(portals[potential_name] - {(x, y)})[0]
                    dists[(*target, next_depth)] = dists[col, row, depth] + 2
                    queue.append((*target, next_depth))
            dists[x, y, depth] = dists[col, row, depth] + 1
            queue.append((x, y, depth))
    return dists


search_map = search(*position)
print(search_map.get(destination))
search_map_2 = search_2(*position)
print(search_map_2.get((*destination, 0)))
# for ry, row in enumerate(map):
#     print(
#         "".join(
#             (
#                 wall
#                 if tile == "#"
#                 else (
#                     colour.Back.RESET
#                     + (str(search_map.get((rx, ry), "xx")).zfill(2)[-2:])
#                     if tile == "."
#                     else unexplored
#                 )
#             )
#             if not portals_to_name.get((rx, ry))
#             else colour.Back.RESET + portals_to_name[rx, ry]
#             for rx, tile in enumerate(row)
#         )
#     )
