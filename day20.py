map = """                                 T     P           U       U       Z   O                                     
                                 H     Z           A       U       W   K                                     
  ###############################.#####.###########.#######.#######.###.###################################  
  #.#.#.#.#.............#.#...#.#.....#...#.....#.....#.....#...#.....#...#...#...#.#.......#.....#.......#  
  #.#.#.#.#####.#.#####.#.###.#.#.###.###.#.#.#.#.#.#.#.###.###.#.###.#.###.###.###.#####.#####.###.#.#####  
  #...#.........#.#...........#...#...#.#...#.#.#.#.#.#.#.#.....#...#.#.#...........#.#.#.#.#.......#...#.#  
  ###.###.###.#########.###.###.#####.#.#.###.#####.#.#.#.#####.#.#.#.#.#.#######.###.#.#.#.###.#########.#  
  #...#.#.#.......#.#.....#.....#.......#.#.#.#.#...#.#.#.#.#...#.#.#.#.......#.....#...#.#.#.#.....#.....#  
  ###.#.#####.###.#.#########.#.#.###.###.#.#.#.#####.#.#.#.#######.#.#.#.#############.#.#.#.#.###.#####.#  
  #.....#.....#.#.#...........#.#.#...#.#.#.......#...#.......#...#.#.#.#.#...#.#.#.#.#.........#.#...#...#  
  #.###.#####.#.#######.#####.#######.#.#####.#####.###.#.#.#####.###.#.###.###.#.#.#.#.#########.#####.###  
  #.#.#.#...#.#.....#.#.#.#...#...#.......#.#...#.....#.#.#.....#.....#.............................#.....#  
  ###.#.#.#####.#####.###.###.#.###.#.#.###.#.#####.#.###.#.#.#.#####.###.#######.###.###.#.###.#.###.#####  
  #.........#.#...#.#.......#.#...#.#.#.#.....#.....#.#...#.#.#.#...#.#...#.#...#.#.#.#...#...#.#.#.....#.#  
  #####.#####.#.###.#####.#.###.#.###.###.###.#.###.###.#####.#####.#.#.#.#.#.#####.#####.###########.###.#  
  #.#.#...#.#.....#...#...#.....#.#.....#.#...#...#...#.#.#.#.#...#.#.#.#...#.#.......#...........#.#.#.#.#  
  #.#.#.###.#.#####.###.#########.#.#.#######.###.#.#####.#.#.#.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#.#  
  #.....#.....#.#.#...#.#...#.....#.#...#.....#...#...#...#.#.#.#.#...#.#.......#.#.#...#.#.#.#.#...#.....#  
  ###.###.#.#.#.#.#.#######.#####.###.#####.###.#.#######.#.#.#.#.#.#.#.#.###.#######.#########.#.#####.###  
  #...#.#.#.#.#.#...#...#.....#...#.....#.#...#.#.#.#.......#.#.#.#.#.#...#.#...#...#.#.....#...#.....#.#.#  
  ###.#.#####.#.###.#.#######.###.###.###.###.#.###.###.#.###.#.#.#.###.###.#.###.#.#.#.#########.#.###.#.#  
  #.....#.#.......#.#...#.....#.#.......#...#.#.....#.#.#.....#.#.#...#.#.........#.....#.#...#.#.#.....#.#  
  ###.#.#.###.#####.#.#####.#.#.#.#.#.###.#.#.#.#####.#.#.###.#.#.###.#.###.#############.#.###.###.#.#.#.#  
  #.#.#.#.#.......#.#.#...#.#...#.#.#.#.#.#.#.#.......#.#.#...#.#...#.#.#...#...#.....#.....#.#...#.#.#.#.#  
  #.#.###.#####.###.#.###.#####.#.#####.#.###.#####.#.#.#######.###.#.###.###.###.#########.#.#.#.#####.#.#  
  #.......#...#...#...#.#.........#...........#.....#.#.......#...#.....#.........#...#.....#.#.#...#.#...#  
  ###.#.###.###.#.###.#.#######.#######.#######.#############.###.###########.#######.###.#.#.###.###.#.###  
  #.#.#...#...#.#.....#...#    Y       R       R             U   X           L    #.....#.#.#.#...#.#...#.#  
  #.#####.#.#######.#####.#    O       F       U             A   Z           Q    #.#.#####.#.###.#.###.#.#  
  #.#.#.#...#...#.....#.#.#                                                       #.#.#.........#...#.....#  
  #.#.#.###.#.#####.#.#.#.#                                                       ###.#.#.#.#.###.#####.###  
RF........#...#.#.#.#......TH                                                     #.#.#.#.#.#.....#.......#  
  #.#######.###.#.#####.###                                                       #.#.#######.###.###.#.###  
BN......#...#.#.#.#.#......ER                                                   BH........#.#.#...#...#.#.#  
  #.#.#####.#.#.#.#.#.###.#                                                       #####.###.#.#######.###.#  
  #.#.#.#...........#.#...#                                                       #.....#.#.#.#.#...#.....#  
  #.###.#.#####.###.###.###                                                       ###.###.#.#.#.###.#.#####  
  #.......#.#.#.#.......#.#                                                       #...#.#.#.#...#.......#..LP
  #######.#.#.#######.###.#                                                       ###.###.#.#.#####.#.###.#  
ON..#.#.#.#.......#.#.#...#                                                       #.#...............#.....#  
  #.#.#.#.###.###.#.#####.#                                                       #.#######################  
  #.#...#.#.....#.........#                                                       #.......................#  
  #.#.#.#####.###.###.###.#                                                       #.#####.#.#.#.#.#####.###  
  #.#.#.....#...#...#.#....CU                                                     #...#...#.#.#.#.#.#...#..CU
  #.#.#.###.#.###.#######.#                                                       #.#####.#.#######.#.###.#  
  #...#.#.....#.#.#...#...#                                                       #.#...#.#.....#.#...#...#  
  ###.#########.#####.#.#.#                                                       #.#.#######.#.#.###.###.#  
YO..#.#.#.#...#.....#.#.#.#                                                     BT..#.....#.#.#.#...#.....#  
  #.###.#.#.#.#.#.###.#####                                                       #.###.###.#######.#######  
  #.........#...#..........UK                                                     #.#.....#.............#..GR
  #.#.###.#.###.###########                                                       ###.#.#####.#########.#.#  
  #.#.#...#...#.#.....#...#                                                       #...#.......#.#...#.....#  
  ###.#########.#.#####.#.#                                                       #.###.#.#.#.#.#.#####.###  
ZH..#...#.#...#.#.#...#.#..GR                                                   OK....#.#.#.#.#.#.#.#...#.#  
  #.#####.###.###.#.#.#.###                                                       #############.#.#.#####.#  
  #.................#...#.#                                                       #.#...#...#.#............KP
  #######################.#                                                       #.#.###.#.#.#.#######.###  
  #.......................#                                                     RK..#.....#.........#.....#  
  ###.#####.#.#.#######.###                                                       #.#.#######.#######.#.###  
BT..#.#...#.#.#.#.....#.#..BN                                                     #.....#...#.#.#...#.#...#  
  #.#.#.#.#####.#.#.###.#.#                                                       #####.###.###.###.#######  
  #.#...#.#...#.#.#.....#.#                                                       #.#.#.#.............#...#  
  #.#####.#.#####.#######.#                                                       #.#.#.#.#.###.#.#######.#  
  #.......#.#.#.#.........#                                                     ON....#.#.#.#...#.#...#....LW
  #########.#.#.###########                                                       #.#####.#######.###.###.#  
  #...............#........ZW                                                     #.#.........#.........#.#  
  #.#.#.###.###.#.###.#####                                                       #.#####.#############.#.#  
UK..#.#.#.#.#...#.#...#...#                                                       #.........#...#.#.#.....#  
  #.#.###.#####.#.###.#.###                                                       #############.#.#.###.###  
  #.#.#.....#.#.#.#.......#                                                       #.............#...#...#.#  
  ###.#.###.#.###.#.#######                                                       #.###.#.#.###.#.#.#####.#  
  #.#.#.#.#...#.#.....#...#                                                       #...#.#.#...#...#.....#..IG
  #.#####.###.#.#######.###                                                       #.#.###.#####.#.#.###.#.#  
  #.......#.............#.#                                                       #.#.#.#.#.....#.#...#...#  
  ###.#.###.#.#.###.###.#.#                                                       #.###.#.#.#.#########.#.#  
LQ....#...#.#.#...#.#...#..UU                                                   PZ......#.#.#...#.......#.#  
  #.#######.###.#.#####.#.#                                                       #.###.#########.###.#####  
ZZ............#.#.#.#...#.#                                                       #.#.#.......#...#.....#.#  
  #.#.#.#.#.#######.###.#.#                                                       #.#.#.#####.#.#####.###.#  
  #.#.#.#.#.........#.....#                                                       #.#.....#...#.#.........#  
  #.#.###.#.#.###.#.#.#.#.#    L     K           Z     L     E       A       I    #.###.#####.#####.#.#.#.#  
  #.#...#.#.#.#...#.#.#.#.#    W     P           H     P     G       U       G    #.#.....#.#...#...#.#.#.#  
  #.#######.#####.#.#####.#####.#####.###########.#####.#####.#######.#######.###########.#.###.#.###.#.###  
  #.#.........#...#.#.......#.....#.#.....#.......#.......#...#.#...#.#.#.#...#.......#.#.#.#...#...#.#...#  
  #.###.###.###.#####.#######.###.#.#.###.#.###.###.###.###.###.#.#.#.#.#.###.#.###.###.#.#.###.###.###.###  
  #.#...#.....#.#.#.#.#.........#...#.#.#.#.#.#...#...#.#...#.....#.#...#.#.......#.#.........#.#...#.#...#  
  #.###.###.#####.#.###.#.#.#.#########.#.#.#.#####.###.###.###.###.#.###.###.###########.#.###.#####.#.###  
  #...#.#...#.......#.#.#.#.#.#.#.....#...#.......#...#.#.....#.#.....#...#...#.#...#.#...#...#.#.......#.#  
  #####.###.#####.#.#.#.###.#.#.#####.#.#.###.#####.#########.#.###.#.#.#.#.###.#.###.###.#.#.#.###.#.#.#.#  
  #.....#...#.#...#.....#...#.......#...#.#.......#.........#.#...#.#.#.#...#...#.#.....#.#.#.#...#.#.#...#  
  #.#.#.#.#.#.#.#####.#########.###.#.###.#.#######.###.#####.#.#####.#####.###.#.###.#.#.###.#.#######.###  
  #.#.#.#.#...#.#.....#.#.#.#.....#.#...#.#.#.#.#.#...#.#.....#.....#.#...#...........#.#.#.#.#.#...#.#...#  
  #.#######.#.#########.#.#.#.#.#########.#.#.#.#.#####.###.#.#.#########.#.#.###.###.#####.###.###.#.#.###  
  #.#.#.#...#...#.............#...#.#.....#.#.#...#.....#...#.#.....#.#.....#.#.#.#...#.#.#...#.#...#.#...#  
  #.#.#.###.#.#######.#.###.#.#####.#####.#.#.#.#####.#.###.###.###.#.###.#.###.#.#####.#.###.###.###.#####  
  #.#.....#.#.#.#.....#.#...#.....#...#...#.......#.#.#...#...#...#.#.#...#.....#.#...#.#.................#  
  #####.###.###.#####.###.#.###.###.#####.#####.#.#.#####.###.###.###.#######.#######.#.#.###.#.###.###.#.#  
  #.........#.........#...#.#.#.#.#.....#.#.....#...#.#.#.#...#.....#...........#.........#.#.#...#.#...#.#  
  #.#####.#.#.#####.###.###.#.#.#.#.#.###.#.#########.#.#.#.###.###.#####.###.#.#.#####.###.#.#######.###.#  
  #.#.#...#.#.#.#...#...#...#...#...#.....#.......#.......#.#.#.#...#.#...#.#.#...#.#.#.#...........#.#...#  
  ###.#.#######.#############.#####.#####.#.#####.#######.#.#.#.#####.###.#.###.###.#.#.###########.#.#.###  
  #...#...#.#.....#.......#.......#.#...#.#.#...#.#.#...#.#.#.....#...#...#...#...#...#...#...#...#.#.#...#  
  ###.#####.#####.#.#####.#.#####.#.#.#.###.#.#.#.#.###.#.#.#.#.###.###.###.#.#####.#######.###.#.###.###.#  
  #...#.................#.....#.#.#...#.#.#.#.#.#.#.......#.#.#.#.....#.....#...................#.#...#...#  
  #.#.###.###.###.#.#.#####.###.#.#.#.#.#.###.#.#.#.#######.###.###.#.#.#####.###.#########.#.#.###.#.###.#  
  #.#.....#...#...#.#...#.....#...#.#.#...#...#...#.......#...#.....#.#.#.......#.........#.#.#...#.#.#...#  
  #############################.#########.###.#########.#####.###.#######.###.#############################  
                               B         R   A         R     E   E       A   X                               
                               H         U   U         K     R   G       A   Z                               """.splitlines()
# map = """                   A
#                    A
#   #################.#############
#   #.#...#...................#.#.#
#   #.#.#.###.###.###.#########.#.#
#   #.#.#.......#...#.....#.#.#...#
#   #.#########.###.#####.#.#.###.#
#   #.............#.#.....#.......#
#   ###.###########.###.#####.#.#.#
#   #.....#        A   C    #.#.#.#
#   #######        S   P    #####.#
#   #.#...#                 #......VT
#   #.#.#.#                 #.#####
#   #...#.#               YN....#.#
#   #.###.#                 #####.#
# DI....#.#                 #.....#
#   #####.#                 #.###.#
# ZZ......#               QG....#..AS
#   ###.###                 #######
# JO..#.#.#                 #.....#
#   #.#.#.#                 ###.#.#
#   #...#..DI             BU....#..LF
#   #####.#                 #.#####
# YN......#               VT..#....QG
#   #.###.#                 #.###.#
#   #.#...#                 #.....#
#   ###.###    J L     J    #.#.###
#   #.....#    O F     P    #.#...#
#   #.###.#####.#.#####.#####.###.#
#   #...#.#.#...#.....#.....#.#...#
#   #.#####.###.###.#.#.#########.#
#   #...#.#.....#...#.#.#.#.....#.#
#   #.###.#####.###.###.#.#.#######
#   #.#.........#...#.............#
#   #########.###.###.#############
#            B   J   C
#            U   P   P               """.splitlines()
from collections import defaultdict, deque
import heapq

# header_1, header_2, *map, footer_1, footer_2 = map
# header_1 = header_1[2:-2]
# header_2 = header_2[2:-2]
# footer_1 = footer_1[2:-2]
# footer_2 = footer_2[2:-2]
# # coff = 25, 25
# coff = 7, 7
# # cwid = 55, 55
# cwid = 17, 19
# left = []
# right = []
# for y, _row in enumerate(map):
#     left_1, left_2, *row, right_1, right_2 = _row
#     left.append(left_1 + left_2)
#     right.append(right_1 + right_2)
#     map[y] = row

# header = [i + j for i, j in zip(header_1, header_2)]
# footer = [i + j for i, j in zip(footer_1, footer_2)]

# portals = defaultdict(set)
# portals_to_name = {}
# for x, entrance_name in enumerate(header):
#     if entrance_name != "  ":
#         portals[entrance_name].add((x, 0))
#         portals_to_name[(x, 0)] = entrance_name
# for x, entrance_name in enumerate(footer):
#     if entrance_name != "  ":
#         portals[entrance_name].add((x, len(map) - 1))
#         portals_to_name[(x, len(map) - 1)] = entrance_name
# for y, entrance_name in enumerate(left):
#     if entrance_name != "  ":
#         portals[entrance_name].add((0, y))
#         portals_to_name[(0, y)] = entrance_name
# for y, entrance_name in enumerate(right):
#     if entrance_name != "  ":
#         portals[entrance_name].add((len(map[0]) - 1, y))
#         portals_to_name[(len(map[0]) - 1, y)] = entrance_name

# inside_h = [
#     i + j
#     for i, j in zip(
#         map[coff[1]][coff[0] : coff[0] + cwid[0]],
#         map[coff[1] + 1][coff[0] : coff[0] + cwid[0]],
#     )
# ]
# inside_f = [
#     i + j
#     for i, j in zip(
#         map[coff[1] + cwid[1] - 2][coff[0] : coff[0] + cwid[0]],
#         map[coff[1] + cwid[1] - 1][coff[0] : coff[0] + cwid[0]],
#     )
# ]
# inside_l = [i[coff[0]] + i[coff[0] + 1] for i in map[coff[1] : coff[1] + cwid[1]]]
# inside_r = [
#     i[coff[0] + cwid[0] - 2] + i[coff[0] + cwid[0] - 1]
#     for i in map[coff[1] : coff[1] + cwid[1]]
# ]

# for x, entrance_name in enumerate(inside_h):
#     if entrance_name != "  ":
#         portals[entrance_name].add((x + coff[0], coff[1] - 1))
#         portals_to_name[(x + coff[0], coff[1] - 1)] = entrance_name
# for x, entrance_name in enumerate(inside_f):
#     if entrance_name != "  ":
#         portals[entrance_name].add((x + coff[0], coff[1] + cwid[1]))
#         portals_to_name[(x + coff[0], coff[1] + cwid[1])] = entrance_name
# for y, entrance_name in enumerate(inside_l):
#     if entrance_name != "  ":
#         portals[entrance_name].add((coff[0] - 1, y + coff[1]))
#         portals_to_name[(coff[0] - 1, y + coff[1])] = entrance_name
# for y, entrance_name in enumerate(inside_r):
#     if entrance_name != "  ":
#         portals[entrance_name].add((coff[0] + cwid[0], y + coff[1]))
#         portals_to_name[(coff[0] + cwid[0], y + coff[1])] = entrance_name
# # search_map = defaultdict(lambda: 9999)
# print(portals)
# position = list(portals["AA"])[0]
# destination = list(portals["ZZ"])[0]
import colorama as colour

colour.init(autoreset=True)
empty = colour.Back.BLACK + "　"
wall = colour.Back.WHITE + "　"
unexplored = colour.Back.LIGHTBLACK_EX + "　"
cursor_pos = colour.Cursor.POS()


# def search(x, y, n):
#     queue = deque([(x, y)])
#     dists = {(x, y): 0}
#     while queue:
#         col, row = queue.popleft()
#         for (x, y) in [
#             (row, col + 1),
#             (row, col - 1),
#             (row + 1, col),
#             (row - 1, col),
#         ]:
#             if not (0 <= x < len(map[0]) and 0 <= y < len(map)):
#                 continue
#             tile = map[y][x]
#             if tile != "." or (x, y) in dists:
#                 continue
#             potential_name = portals_to_name.get((x, y))
#             if potential_name == "ZZ":
#                 print(dists[col, row] + 1)
#             if len(portals.get(potential_name, "")) > 1:
#                 print("taking a portal:", potential_name)
#                 # taken_portals.add(potential_name)
#                 target = list(portals[potential_name] - {(x, y)})[0]
#                 dists[target] = dists[col, row] + 1
#                 queue.append(target)
#             dists[x, y] = dists[col, row] + 1
#             queue.append((x, y))
#     return dists
#     # print(cursor_pos)
#     # for ry, row in enumerate(map):
#     #     print(
#     #         "".join(
#     #             (
#     #                 wall
#     #                 if tile == "#"
#     #                 else (
#     #                     colour.Back.RESET + (str(search_map[rx, ry]).zfill(2)[-2:])
#     #                     if tile == "."
#     #                     else unexplored
#     #                 )
#     #             )
#     #             if not portals_to_name.get((rx, ry))
#     #             else colour.Back.RESET + portals_to_name[rx, ry]
#     #             for rx, tile in enumerate(row)
#     #         )
#     #     )
#     # try:
#     #     if map[y][x] != ".":
#     #         # print("not empty")
#     #         return
#     # except IndexError:
#     #     # print("oob")
#     #     return
#     # if search_map[x, y] <= n:
#     #     return
#     # search_map[x, y] = n
#     # potential_name = portals_to_name.get((x, y))
#     # if len(portals.get(potential_name, "")) > 1 and not potential_name in taken_portals:
#     #     taken_portals.add(potential_name)
#     #     target = list(portals[potential_name] - {(x, y)})[0]
#     #     print("portal=", potential_name, "destination=", target)
#     #     search(*target, n + 1)
#     # search(x, y + 1, n + 1)
#     # search(x, y - 1, n + 1)
#     # search(x + 1, y, n + 1)
#     # search(x - 1, y, n + 1)


# search_map = search(*position, 0)
# print(search_map.get(destination))
# # print(cursor_pos)


portals_a = {}
portals_b = {}
for y in range(2, len(map) - 2):
    for x in range(2, len(map[0]) - 2):
        if map[y][x] != ".":
            continue
        for portal_name in [
            map[y][x - 2 : x],
            map[y][x + 1 : x + 3],
            map[y - 2][x] + map[y - 1][x],
            map[y + 1][x] + map[y + 2][x],
        ]:
            if portal_name.isalpha():
                if portal_name in portals_a:
                    portals_b[x, y] = portals_a[portal_name]
                    portals_a[x, y] = portal_name
                    portals_b[portals_a[portal_name]] = x, y
                else:
                    portals_a[portal_name] = x, y
                    portals_a[x, y] = portal_name
                continue
portals = {portal for portal in portals_a.keys() if isinstance(portal, tuple)}
queue = [(0, portal, portal) for portal in portals]
state_map = {}
search_map = defaultdict(list)
while queue:
    distance, portal, position = heapq.heappop(queue)
    if (portal, position) in state_map:
        print("skipping")
        continue
    if position in portals:
        print("push")
        search_map[portal].append((position, distance))
    state_map[portal, position] = distance
    x, y = position
    for nx, ny in [(x, y + 1), (x, y - 1), (x + 1, y), (x - 1, y)]:
        if map[ny][nx] == ".":
            heapq.heappush(queue, (distance + 1, portal, (nx, ny)))
print(state_map, search_map)
queue = [(0, portals_a["AA"], 0)]
state_map = {}
done = False
while queue:
    distance, portal, depth = heapq.heappop(queue)
    if (portal, depth) in state_map:
        print("skipping")
        continue
    state_map[portal, depth] = distance
    if not done and portals_a["ZZ"] == portal:
        done = True
        print(distance)
    if portals_a["ZZ"] == portal and depth == 0:
        print(distance)
        break
    x, y = portal
    if portal in state_map:
        for other, other_distance in search_map[portal]:
            print("push")
            heapq.heappush(queue, (distance + other_distance, other, depth))
    if portal in portals_b:
        if 3 <= x < len(map) - 3 and 3 <= y < len(map[0]) - 3:
            print("push")
            heapq.heappush(queue, (distance + 1, portals_b[portal], depth + 1))
        elif depth >= 1:
            print("push")
            heapq.heappush(queue, (distance + 1, portals_b[portal], depth + 1))


# for ry, row in enumerate(map):
#     print(
#         "".join(
#             colour.Back.RESET
#             + (
#                 portals_a.get((rx, ry))
#                 or portals_b.get((rx, ry))
#                 or (
#                     wall
#                     if tile == "#"
#                     else (
#                         colour.Back.RESET
#                         + (str(search_map.get((rx, ry), "xx")).zfill(2)[-2:])
#                         if tile == "."
#                         else unexplored
#                     )
#                 )
#             )
#             for rx, tile in enumerate(row)
#         )
#     )
