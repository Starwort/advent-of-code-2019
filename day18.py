map = [
    [*i]
    for i in """#################################################################################
#.........#q..#.......................#.#.....................#...#.............#
#.#####.#.###.#.#######.#############.#.#.###################.#.#.#.#######.###.#
#...#...#...#.....#...#g#...........#...#.#...........#.O.#...#.#.#...#...#.#...#
###.#.#####.#######.#.#.#####.###.#.###.#.#####.#####.#.#.#.###.#F###.#.#.#.#T###
#.#.#...#...#.......#...#...#...#.#.#...#.....#...#.#.#.#...#...#...#.#.#...#...#
#.#.###.#.###.###########.#.#####.###.#######.#.#.#.#.#.#####.#####.#.#.#########
#...#...#.....#...........#.....#.#y..#.#.....#.#.#...#.....#...#...#.#.#.......#
#.###.#########.#####.#########.#.#.###.#.#######.#.#######.###.#.###.#.#.#####.#
#...#.......#...#.....#.....#.....#.#...#.#.......#.....#.#...#.#.#.#.#.......#.#
#.#######.#.#.#########.###.#.#####.#.#.#.###.#########.#.#.#.#.#.#.#.#########.#
#.#.....#.#.#.#...#.......#.#.#.#...#.#.#...#.#...#...#...#.#.#.#.#...#.#.......#
###.###.###.#.#.#.#.#######.#.#.#.#####.###.#.#.#.###.###.#.#.#.#.###.#.#.#####E#
#...#.......#...#...#...#...#...#.#.....#.#...#.#.......#.#.#.#.#...#...#...#...#
#.#################.###.#.#######.#.#.###.#####.#########.#.###.###.#.#####.#.###
#.......#.....#...#...#.#.......#.#.#...#.................#.#...#.#.#.#.....#...#
#.#####.#.###.#.#.###.#.#######.#.#####.#.#########.#######.#.###.#.#.#.#######.#
#e#...#.#.#.#.#.#.#...........#.........#.#.......#.....#...#.#...#.#.#.#.C.#...#
#.#.###.#.#.#.#.#.#######.#############.#.#.#####.#######.#.#.#.#.#.#.#.#.#.#.###
#.#.#...#...#...#...#.....#...#...#.....#.#...#.#.....#...#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#####.#######.#######.#.#.#.#######.###.#.#####.#.#####.#.#.#.###.#.###.#.#
#...#.#...#.#.....#...#...#.#...#.......#.#...#...#...#.....#.#.#.#.....#.....#.#
###.#.#.#.#.#####.#####.#.#.###########.#.#.###.#.#.###.###.###.#.#######.#####.#
#...#...#.#.........#...#...#...#.......#.#.#...#.#.#.#...#.....#...#...#...#...#
#.#######.#########.###.#######.#.#########.#.###.#.#.#.#####.###.#.#.#.###.#.#.#
#.#.#.....#.......#.#...#.......#.#.#...#...#...#...#...#...#.#...#.#.#...#.#.#.#
#.#.#.#####.#####.#.#.###.#######.#.#.#.#.#####.#####.###.#.###.###.#.#####.###Z#
#...#.........#...#...#.#.........#..k#.#.#.....#.......#.#...#...#...#.....#...#
###############.#.#####.#.#########.###.#.#.#############.###.###.#####.#####.#.#
#...N...#...#...#.#...#...#.#...#...#...#.#.............#.#.......#...#.#....b#.#
#.#####.#.#.#.###.###.#.###.#.#.#.###.#.#.#############.#.#########.#.#.###.###.#
#.#.......#.#...#.....#.#...#.#...#...#.#.#...#.......#.#...#.....#.#.#.....#...#
#.#########.###.#######.#.#.#.#####.###.#.#.#.#####.###.###.#.###.#.#.#######.###
#.#...V.#.#.H.#.#.......#.#.#.....#...#.#...#.#...#.........#...#...#.......#...#
#.#.###.#.###.#.#.#######.#####.#####.###.###.#.#.###.#####.###.#########.#####.#
#.....#.#...#.#.#.#.......#.....#...#...#.#...#.#...#.#...#.#...#.......#.....#.#
#.#####.#.###.#.#.#######.#.#####.#.###.###.#.#.###.###.#.###.###.#####.###.#.#.#
#.#.#...#..a....#...#...#...#.....#...#.#...#.#...#.....#.....#.#.....#..h..#.#.#
#.#.#.#############.#.#.#####.#######.#.#.#######.#############.#####.#########A#
#...#.................#.......#.............................X.......#...........#
#######################################.@.#######################################
#.D.....#.....#.......#.....#.........................#.....#.......#.#...#...#.#
#.###.#.#.#.#.#.#####.#.###.#.#.#######.#.###########.#.#.#.#.#####.#.#I#.#.#.#.#
#i#...#.#.#.#...#.....#.#...#.#x......#.#.#.......#...#.#.#...#.......#.#...#.#.#
###.###.###.#.#####.###.#.###.#######.#.#.###.###.#.#.#.#.#####.#######.#####.#.#
#...#.......#.#...#.#...#...#.#.#.....#.#.....#.#.#.#.#.#v....#.#...#...#d..#...#
#.#######.#####.#.#.#.#####.#.#.#.#####.#######.#.#.###.#####.#.#.###.###.#####.#
#.#.....#.#....u#.#.#...#...#...#.#.#...#.#...#...#.#...#.....#.#.#...#.........#
#.#.###.#.#.#####.#.###.#.#####.#.#.#.###.#.#.#.###.#.###.#####.#.#.###.#########
#.S.#.#.#.#.....#.#...#.#...#...#.#.#.#.#...#.....#.#...#...#.....#...#...#..s..#
#.###.#.#.#.#####.#.###.###.#.###.#.#.#.#.#########.#.#####.#########.###.#####.#
#.#...#.#.#.#.....#.#...#...#.#.#.#.#...#.....#...#...#...#n..#.P...#.#.#.......#
#.#.#.#.###.#.#####.#.###.###.#.#.#.###.#######.#.#####.#.###.#.###.#.#.#######.#
#...#.#.....#.....#.#.#...#.....#.#...#.#...#...#.....#.#...#.#.#.#...#.......#.#
#####.###########.#.#.###.#######.#.###.#.#.#.#######.#.###.#.#.#.#########.#.#U#
#.....#.......#...#.#...#.#.......#.....#.#...#.....#...#.....#.#...........#.#.#
#.#########.#.#.###.###.#.#.#######.#####.#####.#.###.#####.###.#.#######.#####.#
#.#.......#.#.#.#..w#...#...#...#...#.K.#...#.#.#.....#...#.#...#.#.#...#.#.....#
#.#.#####.#.#.#.###.#.#######.###.###.#.#.#.#.#.#######.#.###.###.#.#.#.#.#.#####
#...#..p....#.#...#.#...#...#...#.....#.#.#.#.#...#.....#...#...#.#...#...#.....#
#.###########.###.#.###.#.#.#R#.#######.#.#.#.###.#.#######.###.#.###.#########.#
#.#.......#.....#.#.#...#.#.#.#.......#.#.#.#.....#.#.#.....#.#.#...#.#.......#.#
#.#.#####.#######.#.#####M###.#.#####.#.#.#.###.###.#.#.#####.#W#.#.###.#.###.#.#
#.#.#.#.........#.#.#...#...#.#...#..m#.#.#...#.#...#.#.#...#j..#.#.#...#.#...#.#
#.#.#.#.#######.#.#.#.#.###.#.###.#####.#.###.###.###.#.#.#.#######.#.###.#.###.#
#.#.#.....#...#...#...#...#...#...#.....#.#.#.....#...#...#.........#.#...#.Q.#.#
#.#.#####.#.#.###########.#.###.#.#.#####.#.#######.#.#####.###.#####.#.#.#####.#
#.#.....#.#.#.........#...#.#...#.#.#...#...#.......#.#.#...#.#.#.G...#.#.#...#.#
#######.###.#########.#J#####L###.#.#.#.###.###.#.###.#.#.###.#.#.#####.###.#.#.#
#.....#.......#...#...#.#...#.#...#...#.#.#...#.#.#.....#.#...#.#.#...#.....#.Y.#
#B###.#######.###.#.###.#.#.#.#########.#.###.#.#.#######.#.###.#.#.#############
#.#...#...#...#...#...#l..#...#.....#...#.#...#.#.......#.#.....#.#.........#...#
#.###.#.#.#.###.#####.#######.#.###.#.###.#.###.#######.#.#####.#.#.###.###.#.###
#...#...#.#.....#...#...#...#.#.#.#...#.#.#.#...#.......#.....#.#.#...#.#...#f..#
#.#.#####.#.#####.#.###.#.#.#.#.#.#####.#.#.#####.#####.#####.###.#####.#.#####.#
#.#.....#.#.#.....#.#...#r#...#.....#...#.#.....#.#...#.#...#..o#.#.....#.#.....#
#.#####.#.###.#####.#.#.###########.#.#.#.#####.#.#.###.###.###.#.#.#####.#.#.#.#
#...#.#.#.....#z..#...#.#.....#.....#.#.#c....#.#.#...#.....#...#...#....t#.#.#.#
###.#.#.#######.#.#######.###.#.#######.#.#.###.#.#.#.#####.#.#######.#######.#.#
#.....#.........#...........#...........#.#.......#.#.......#.................#.#
#################################################################################""".splitlines()
]
from collections import deque
from functools import lru_cache
import string


def _reachable_keys(map, position, obtained):
    queue = deque([position])
    dists = {position: 0}
    keys = {}
    while queue:
        row, col = queue.popleft()
        for (y, x) in [
            (row, col + 1),
            (row, col - 1),
            (row + 1, col),
            (row - 1, col),
        ]:
            if not (0 <= x < len(map[0]) and 0 <= y < len(map)):
                continue
            tile = map[y][x]
            if tile == "#":
                continue
            if (y, x) in dists:
                continue
            dists[y, x] = dists[row, col] + 1
            if tile in string.ascii_uppercase and tile.lower() not in obtained:
                continue
            if tile in string.ascii_lowercase and tile not in obtained:
                keys[tile] = dists[y, x], (y, x)
            else:
                queue.append((y, x))
    return keys


def reachable_keys(map, positions, obtained):
    keys = {}
    for robot, start in enumerate(positions):
        for key, (distance, position) in _reachable_keys(map, start, obtained).items():
            keys[key] = distance, position, robot
    return keys


@lru_cache(maxsize=None)
def shortest_path(positions, obtained):
    keys = reachable_keys(map, positions, obtained)
    if len(keys) == 0:
        return 0
    distances = []
    for key, (distance, position, robot) in keys.items():
        robot_positions = tuple(
            [initial, position][i == robot] for i, initial in enumerate(positions)
        )
        distances.append(
            distance + shortest_path(robot_positions, "".join(sorted(obtained + key)))
        )
    return min(distances)


for y, row in enumerate(map):
    for x, tile in enumerate(row):
        if tile == "@":
            position = (y, x)
            break
    else:
        continue
    break
print(shortest_path(((y, x),), ""))
shortest_path.cache_clear()
map[y - 1][x - 1] = "@"
map[y - 1][x] = "#"
map[y - 1][x + 1] = "@"
map[y][x - 1] = "#"
map[y][x] = "#"
map[y][x + 1] = "#"
map[y + 1][x - 1] = "@"
map[y + 1][x] = "#"
map[y + 1][x + 1] = "@"

print(
    shortest_path(((y - 1, x - 1), (y - 1, x + 1), (y + 1, x - 1), (y + 1, x + 1)), "")
)
